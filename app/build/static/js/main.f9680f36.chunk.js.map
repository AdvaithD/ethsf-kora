{"version":3,"sources":["screens/GovernanceScreen.js","App.jsx","screens/DiscussionScreen.js","screens/VotingScreen.js","serviceWorker.js","index.js"],"names":["GovernanceScreen","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleBloomAuthenticate","bind","assertThisInitialized","document","getElementById","e","console","log","renderDiscussionScreen","defaultData","action","Action","attestation","token","url","org_logo_url","org_name","org_usage_policy_url","org_privacy_policy_url","types","react_default","a","createElement","Grid","className","Row","id","dist","requestData","size","Button","bsStyle","onClick","React","Component","App","screen","discussionScreen","setState","GovernanceScreen_GovernanceScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9680f36.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Row, Col, Button } from 'react-bootstrap';\nimport { RequestQRCode, RequestData, Action } from '@bloomprotocol/share-kit'\n\nexport default class GovernanceScreen extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    }\n\n    this.handleBloomAuthenticate = this.handleBloomAuthenticate.bind(this);\n  }\n\n  componentDidMount() {\n    let eipDiv = document.getElementById('eip999');\n  }\n\n  handleBloomAuthenticate(e) {\n    console.log('hello -> ', e);\n  }\n\n  renderDiscussionScreen() {\n    this.props.renderDiscussionScreen();\n  }\n\n  render() {\n    const defaultData = {\n      action: Action.attestation,\n      token: 'a08714b92346a1bba4262ed575d23de3ff3e6b5480ad0e1c82c011bab0411fdf',\n      url: 'http://localhost:3000/api/bloomShareReceiveData',\n      org_logo_url: 'https://bloom.co/images/notif/bloom-logo.png',\n      org_name: 'MahDemocracy',\n      org_usage_policy_url: 'https://bloom.co/legal/terms',\n      org_privacy_policy_url: 'https://bloom.co/legal/privacy',\n      types: ['email'],\n    }\n\n    return (\n      <Grid className=\"App-governance\">\n        <Row className=\"eip\" id=\"eip999\">\n          <Row className=\"eip-overview\">\n            <p>eip: 999</p>\n            <p>title: Restore Contract Code at 0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4</p>\n            <p>author: Afri Schoedon (@5chdn)</p>\n            <p>discussions-to: https://ethereum-magicians.org/t/eip-999-restore-contract-code-at-0x863df6bfa4/130</p>\n            <p>status: Draft</p>\n            <p>type: Standards Track</p>\n            <p>category: Core</p>\n            <p>created: 2018-04-04</p>\n          </Row>\n\n          <Row className=\"eip-summary\">\n            <h2> Summary </h2>\n            <p >\n              This document proposes to restore the contract code of the `WalletLibrary`\n              contract at `0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4` with a patched version.\n              The contract was accidentally self-destructed and renders a significant amount\n              of Ether inaccessible.\n            </p>\n          </Row>\n\n          <Row className=\"eip-abstract\">\n            <h2> Abstract </h2>\n            <p >\n              The `WalletLibrary` contract was used by the\n              [Parity Wallet](https://www.parity.io/) to reduce gas costs for users deploying\n              multi-signature wallets on the Ethereum blockchain. It contained basic\n              functionality such as confirming or revoking multi-signature transactions for\n              any wallet deployed that depends on this library. The\n              [accidental self-destruction](https://github.com/paritytech/parity/issues/6995)\n              of the library contract caused significant amounts of Ether and other assets\n              owned by many different parties to be inaccessible. This proposal suggests\n              restoring the `WalletLibrary` by a\n              [patched](https://github.com/parity-contracts/0x863df6bfa4) version to allow the\n              owners of the dependent multi-signature wallets regain access to their assets.\n            </p>\n          </Row>\n\n          <Row className=\"eip-specification\">\n            <h2> Specification </h2>\n            <p >\n              The self-destructed contract code at\n              [`0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4`](https://etherscan.io/address/0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4#code)\n              shall be replaced with a patched version of the\n              [`walletLibrary.sol`](https://github.com/parity-contracts/0x863df6bfa4/blob/master/contracts/walletLibrary.sol)\n              as reviewed, tested, and approved in\n              [parity-contracts/0x863df6bfa4](https://github.com/parity-contracts/0x863df6bfa4):\n            </p>\n          </Row>\n\n          <Row className=\"eip-rationale\">\n            <h2> Specification </h2>\n            <RequestQRCode requestData={defaultData} size={400} />\n          </Row>\n\n        </Row>\n\n        <div className=\"actions\">\n          <Button bsStyle=\"primary\" className=\"bloom-authenticate\" onClick={this.handleBloomAuthenticate}> Identify with Bloom </Button>\n          <Button bsStyle=\"success\"> Comment </Button>\n        </div>\n      </Grid>\n    );\n  }\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport GovernanceScreen from './screens/GovernanceScreen';\nimport DiscussionScreen from './screens/DiscussionScreen';\nimport VotingScreen from './screens/VotingScreen';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      screen: 'Governance'\n    }\n\n    this.discussionScreen = this.discussionScreen.bind(this);\n  }\n\n  discussionScreen() {\n    this.setState({ screen: 'Discussion' });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Ethereum Improvement Proposal #999\n        </header>\n\n        <div className=\"App-body\">\n          <GovernanceScreen renderDiscussionScreen = {this.discussionScreen}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// {\n//   switch (this.state.screen) {\n//     case 'Governance':\n//       return <GovernanceScreen />;\n//     case 'Discussion':\n//       return <DiscussionScreen />;\n//     case 'Voting':\n//       return <VotingScreen />;\n//     default:\n//       return null;\n//   }\n// }\n","import React from 'react';\n\nexport default class DiscussionScreen extends React.Component {\n\n\n  render() {\n    return (\n      <div> Discussion </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class VotingScreen extends React.Component {\n\n\n  render() {\n    return (\n      <div> Voting </div>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div className=\"ethsf\">\n    <App />\n  </div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}